// To know if the Keyboard is visible.
if(WidgetsBinding.instance.window.viewInsets.bottom > 0.0)
    {
       // Keyboard is visible.
    }
    else
    {
       // Keyboard is not visible.
    }
// Or
MediaQuery.of(context).viewInsets.bottom > 0.0 // Keyboard is visible.
MediaQuery.of(context).viewInsets.bottom = 0.0 // Keyboard is invisible.


// focused background color for text field
FocusNode _focusNode = FocusNode();
Color _color = Colors.grey;
@override
void initState() {
  _focusNode.addListener(() {
    if(_focusNode.hasFocus){
      setState(() {
        _color = Colors.white;
      });
    }
    else{
      setState(() {
        _color = Colors.grey;
      });
    }
  });
}
TextField(
  decoration: InputDecoration(
    fillColor: _color,
    filled: true
  ),
  focusNode: _focusNode,
),

================================================================
=          FocusNode doesn't work with Bloc (;_;)              =
================================================================
import 'package:bloc/bloc.dart';
import 'package:chat_app/core/colors.dart';
import 'package:flutter/material.dart';

part 'state.dart';
part 'event.dart';

class TextFieldBloc extends Bloc<TextFieldEvent, TextFieldState> {
  FocusNode focusNode = FocusNode();
  Color? color = null;
  TextFieldBloc() : super(TextFieldInitial()) {
    on<ChangeBackgroundEvent>((event, emit)  {
      color = event.hasFocus ? focusedTextFieldBackground : null;
      emit(ChangeBackground());
    });
  }
}

part of 'bloc.dart';

abstract class TextFieldEvent {}

class ChangeBackgroundEvent extends TextFieldEvent {
  final bool hasFocus;

  ChangeBackgroundEvent({required this.hasFocus});
}
part of 'bloc.dart';


abstract class TextFieldState {}

class TextFieldInitial extends TextFieldState{}

class ChangeBackground extends TextFieldState{}

================================================================
